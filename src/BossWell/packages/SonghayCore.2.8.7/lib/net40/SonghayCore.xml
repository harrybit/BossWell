<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SonghayCore</name>
    </assembly>
    <members>
        <member name="T:Songhay.Collections.ObservableSortingCollection`1">
            <summary>
            Extends <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            with sorting.
            </summary>
            <typeparam name="T">Collection Type</typeparam>
            <remarks>
                There are many ways to handle this issue. The code here is based on
                “Write a Sortable ObservableCollection for WPF” by Brian Lagunas
                [http://elegantcode.com/2009/05/14/write-a-sortable-observablecollection-for-wpf/]
            </remarks>
        </member>
        <member name="M:Songhay.Collections.ObservableSortingCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Collections.ObservableSortingCollection`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Songhay.Collections.ObservableSortingCollection`1.Sort``1(System.Func{`0,``0},System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the specified key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Songhay.Collections.ObservableSortingCollection`1.Sort``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the specified key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="T:Songhay.Collections.RefreshEventArgs">
            <summary>
            Refresh Event Arguments, provides indication of need for data refresh
            </summary>
        </member>
        <member name="P:Songhay.Collections.RefreshEventArgs.SortDescriptions">
            <summary>
            Gets or sets the sort descriptions.
            </summary>
            <value>The sort descriptions.</value>
        </member>
        <member name="T:Songhay.Collections.SortableCollectionView`1">
            <summary>
            A sorting <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            based on <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Based on “Silverlight DataGrid Custom Sorting” by Manish Dalal
            [http://weblogs.asp.net/manishdalal/archive/2008/12/30/silverlight-datagrid-custom-sorting.aspx]
            </remarks>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Collections.SortableCollectionView`1"/> class.
            </summary>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.GetItemAt(System.Int32)">
            <summary>
            Gets the item at.
            </summary>
            <param name="index">The index.</param>
            <returns>item if found; otherwise, null</returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.CanFilter">
            <summary>
            Gets a value that indicates whether this view supports filtering by way of the <see cref="P:System.ComponentModel.ICollectionView.Filter"/> property.
            </summary>
            <value></value>
            <returns>true if this view supports filtering; otherwise, false.
            </returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.CanGroup">
            <summary>
            Gets a value that indicates whether this view supports grouping by way of the <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions"/> property.
            </summary>
            <value></value>
            <returns>true if this view supports grouping; otherwise, false.
            </returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.CanSort">
            <summary>
            Gets a value that indicates whether this view supports sorting by way of the <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions"/> property.
            </summary>
            <value></value>
            <returns>true if this view supports sorting; otherwise, false.
            </returns>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.Contains(System.Object)">
            <summary>
            Indicates whether the specified item belongs to this collection view.
            </summary>
            <param name="item">The object to check.</param>
            <returns>
            true if the item belongs to this collection view; otherwise, false.
            </returns>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.IsValidType(System.Object)">
            <summary>
            Determines whether the specified item is of valid type
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if the specified item is of valid type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.Culture">
            <summary>
            Gets or sets the cultural information for any operations of the view that may differ by culture, such as sorting.
            </summary>
            <value></value>
            <returns>
            The culture information to use during culture-sensitive operations.
            </returns>
        </member>
        <member name="E:Songhay.Collections.SortableCollectionView`1.CurrentChanged">
            <summary>
            Occurs after the current item has been changed.
            </summary>
        </member>
        <member name="E:Songhay.Collections.SortableCollectionView`1.CurrentChanging">
            <summary>
            Occurs before the current item changes.
            </summary>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.CurrentItem">
            <summary>
            Gets the current item in the view.
            </summary>
            <value></value>
            <returns>
            The current item in the view or null if there is no current item.
            </returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.CurrentPosition">
            <summary>
            Gets the ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> in the view.
            </summary>
            <value></value>
            <returns>
            The ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> in the view.
            </returns>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.DeferRefresh">
            <summary>
            Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.
            </summary>
            <returns>
            The typical usage is to create a using scope with an implementation of this method 
            and then include multiple view-changing calls within the scope. 
            The implementation should delay automatic refresh until after the using scope exits.
            </returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.Filter">
            <summary>
            Gets or sets a callback that is used to determine whether an item is appropriate for inclusion in the view.
            </summary>
            <value></value>
            <returns>A method that is used to determine whether an item is appropriate for inclusion in the view.</returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.GroupDescriptions">
            <summary>
            Gets a collection of <see cref="T:System.ComponentModel.GroupDescription"/> objects that describe how the items in the collection are grouped in the view.
            </summary>
            <value></value>
            <returns>A collection of objects that describe how the items in the collection are grouped in the view. </returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.Groups">
            <summary>
            Gets the top-level groups.
            </summary>
            <value></value>
            <returns>A read-only collection of the top-level groups or null if there are no groups.</returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.IsCurrentAfterLast">
            <summary>
            Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> of the view is beyond the end of the collection.
            </summary>
            <value></value>
            <returns>true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> of the view is beyond the end of the collection; otherwise, false.
            </returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.IsCurrentBeforeFirst">
            <summary>
            Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> of the view is beyond the start of the collection.
            </summary>
            <value></value>
            <returns>true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> of the view is beyond the start of the collection; otherwise, false.
            </returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.IsCurrentInSync">
            <summary>
            Gets a value indicating whether this instance is current in sync.
            </summary>
            <value>
            	<c>true</c> if this instance is current in sync; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.IsCurrentInView">
            <summary>
            Gets a value indicating whether this instance is current in view.
            </summary>
            <value>
            	<c>true</c> if this instance is current in view; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the view is empty.
            </summary>
            <value></value>
            <returns>true if the view is empty; otherwise, false.
            </returns>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.MoveCurrentTo(System.Object)">
            <summary>
            Sets the specified item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>.
            </summary>
            <param name="item">The item to set as the current item.</param>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is an item in the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.MoveCurrentToFirst">
            <summary>
            Sets the first item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>.
            </summary>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is an item in the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.MoveCurrentToLast">
            <summary>
            Sets the last item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>.
            </summary>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is an item in the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.MoveCurrentToNext">
            <summary>
            Sets the item after the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>.
            </summary>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is an item in the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.MoveCurrentToPrevious">
            <summary>
            Sets the item before the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> in the view to the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>.
            </summary>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is an item in the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.MoveCurrentToPosition(System.Int32)">
            <summary>
            Sets the item at the specified index to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> in the view.
            </summary>
            <param name="position">The index to set the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> to.</param>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is an item in the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.ChangeCurrentToPosition(System.Int32)">
            <summary>
            Changes the current to position.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.IsOKToChangeCurrent">
            <summary>
            Determines whether it is OK to change current item.
            </summary>
            <returns>
            	<c>true</c> if is OK to change current item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.OnCurrentChanged">
            <summary>
            Called when current item has changed.
            </summary>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.OnCurrentChanging(System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Raises the <see cref="E:CurrentChanging"/> event.
            </summary>
            <param name="args">The <see cref="T:System.ComponentModel.CurrentChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.OnCurrentChanging">
            <summary>
            Called when the current item is changing.
            </summary>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Songhay.Collections.SortableCollectionView`1.OnRefresh">
            <summary>
            Occurs when data needs to be refreshed.
            </summary>
        </member>
        <member name="M:Songhay.Collections.SortableCollectionView`1.Refresh">
            <summary>
            Recreates the view, by firing OnRefresh event.
            </summary>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.SortDescriptions">
            <summary>
            Gets a collection of <see cref="T:System.ComponentModel.SortDescription"/> instances that describe how the items in the collection are sorted in the view.
            </summary>
            <value></value>
            <returns>
            A collection of values that describe how the items in the collection are sorted in the view.
            </returns>
        </member>
        <member name="P:Songhay.Collections.SortableCollectionView`1.SourceCollection">
            <summary>
            Returns the underlying collection.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> object that is the underlying collection.</returns>
        </member>
        <member name="T:Songhay.ComponentModel.BackgroundWorkerUtility">
            <summary>
            Static members
            for <see cref="T:System.ComponentModel.BackgroundWorker"/>.
            </summary>
        </member>
        <member name="M:Songhay.ComponentModel.BackgroundWorkerUtility.DoWork(System.Action{System.Object,System.ComponentModel.DoWorkEventArgs},System.Action{System.Object,System.ComponentModel.RunWorkerCompletedEventArgs})">
            <summary>
            Encapsulates a thread of work that cannot be cancelled.
            </summary>
            <param name="workAction">The work action.</param>
            <param name="workCompleteAction">The work complete action.</param>
        </member>
        <member name="M:Songhay.ComponentModel.BackgroundWorkerUtility.DoWork(System.Action{System.Object,System.ComponentModel.DoWorkEventArgs},System.Action{System.Object,System.ComponentModel.RunWorkerCompletedEventArgs},System.Action{System.Object,System.ComponentModel.ProgressChangedEventArgs})">
            <summary>
            Does the work.
            </summary>
            <param name="workAction">The work action.</param>
            <param name="workCompleteAction">The work complete action.</param>
            <param name="workProgressAction">The work progress action.</param>
        </member>
        <member name="T:Songhay.Extensions.EncryptionMetadataExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.EncryptionMetadata"/>
            </summary>
            <summary>
            Extensions of <see cref="T:Songhay.Models.EncryptionMetadata"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.EncryptionMetadataExtensions.GetConnectionString(Songhay.Models.EncryptionMetadata,System.Configuration.ConnectionStringSettings)">
            <summary>
            Gets the connection string.
            </summary>
            <param name="encryptionMeta">The encryption meta.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            encryptionMeta;The expected metadata is not here.
            or
            settings;The expected configuration settings are not here.
            </exception>
        </member>
        <member name="M:Songhay.Extensions.EncryptionMetadataExtensions.Decrypt(Songhay.Models.EncryptionMetadata,System.String)">
            <summary>
            Decrypts the specified encrypted string.
            </summary>
            <param name="encryptionMeta">The encryption meta.</param>
            <param name="encryptedString">The encrypted string.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            encryptionMeta;The expected metadata is not here.
            or
            encryptedString;The expected encrypted string is not here.
            </exception>
        </member>
        <member name="M:Songhay.Extensions.EncryptionMetadataExtensions.GetConnectionStringWithDecryptedValue(Songhay.Models.EncryptionMetadata,System.String,System.String)">
            <summary>
            Gets the connection string with decrypted value.
            </summary>
            <param name="encryptionMeta">The encryption meta.</param>
            <param name="connectionString">The connection string.</param>
            <param name="connectionStringKey">The connection string key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            encryptionMeta;The expected metadata is not here.
            or
            connectionString;The expected configuration settings are not here.
            </exception>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="T:Songhay.Extensions.ArrayExtensions">
            <summary>
            Extensions of <see cref="T:System.Array"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ArrayExtensions.Next``1(System.Array,``0)">
            <summary>
            Gets the next item in the specified array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Songhay.Extensions.ArrayExtensions.Previous``1(System.Array,``0)">
            <summary>
            Gets the previous item in the specified array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:Songhay.Extensions.ConfigurationManagerExtensions">
            <summary>
            Extensions of <see cref="T:System.Configuration.ConfigurationManager"/>
            </summary>
            <remarks>
            Several members in this class depend on <see cref="T:Songhay.Models.DeploymentEnvironment"/> constants.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionNameFromEnvironment(System.Configuration.ConnectionStringSettingsCollection,System.String,System.String)">
            <summary>
            Gets the connection name from environment.
            </summary>
            <param name="collection">The collection.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionNameFromEnvironment(System.Configuration.ConnectionStringSettingsCollection,System.String,System.String,System.String)">
            <summary>
            Gets the connection name from environment.
            </summary>
            <param name="collection">The collection.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">unqualifiedKey - The expected App Settings key is not here.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionNameFromEnvironment(System.Configuration.ConnectionStringSettingsCollection,System.String,System.String,System.Boolean)">
            <summary>
            Gets the connection name from environment.
            </summary>
            <param name="collection">The collection.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionNameFromEnvironment(System.Configuration.ConnectionStringSettingsCollection,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the connection name from environment.
            </summary>
            <param name="collection">The collection.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">unqualifiedKey - The expected App Settings key is not here.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionStringSettings(System.Configuration.ConnectionStringSettingsCollection,System.String)">
            <summary>
            Gets the connection string settings.
            </summary>
            <param name="collection">The collection.</param>
            <param name="connectionName">Name of the connection.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionStringSettings(System.Configuration.ConnectionStringSettingsCollection,System.String,System.Boolean)">
            <summary>
            Gets the connection string settings.
            </summary>
            <param name="collection">The collection.</param>
            <param name="connectionName">Name of the connection.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetEnvironmentName(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets the name of the conventional deployment environment.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetEnvironmentName(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets the name of the conventional deployment environment.
            </summary>
            <param name="settings">The settings.</param>
            <param name="environmentKey">The environment key.</param>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetEnvironmentName(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Gets the name of the conventional deployment environment.
            </summary>
            <param name="settings">The settings.</param>
            <param name="environmentKey">The environment key.</param>
            <param name="defaultEnvironmentName">Default name of the environment.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetEnvironmentName(System.Collections.Specialized.NameValueCollection,System.String,System.String,System.Boolean)">
            <summary>
            Gets the name of the conventional deployment environment.
            </summary>
            <param name="settings">The settings.</param>
            <param name="environmentKey">The environment key.</param>
            <param name="defaultEnvironmentName">Default name of the environment.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetKeyWithEnvironmentName(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Gets the name of the key with environment.
            </summary>
            <param name="settings">The settings.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetKeyWithEnvironmentName(System.Collections.Specialized.NameValueCollection,System.String,System.String,System.String)">
            <summary>
            Gets the key with environment name.
            </summary>
            <param name="settings">The settings.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">unqualifiedKey - The expected App Settings key is not here.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetKeyWithEnvironmentName(System.Collections.Specialized.NameValueCollection,System.String,System.String,System.Boolean)">
            <summary>
            Gets the name of the key with environment.
            </summary>
            <param name="settings">The settings.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> [throw configuration errors exception].</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetKeyWithEnvironmentName(System.Collections.Specialized.NameValueCollection,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the key with environment name.
            </summary>
            <param name="settings">The settings.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">unqualifiedKey - The expected App Settings key is not here.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetSetting(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets the setting from the current <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="settings">The settings.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetSetting(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            Gets the setting from the current <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="settings">The settings.</param>
            <param name="key">The key.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetSetting(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean,System.Func{System.String,System.String})">
            <summary>
            Gets the setting from the current <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="settings">The settings.</param>
            <param name="key">The key.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <param name="settingModifier">The setting modifier.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.ToAppSettings(System.Xml.Linq.XDocument)">
            <summary>
            Converts the external configuration file to the application settings <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="externalConfigurationDoc">The external configuration document.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.ToConnectionStringSettingsCollection(System.Xml.Linq.XDocument)">
            <summary>
            Converts the external configuration file to the application settings <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/>.
            </summary>
            <param name="externalConfigurationDoc">The external configuration document.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.WithAppSettings(System.Collections.Specialized.NameValueCollection,System.Xml.Linq.XDocument)">
            <summary>
            Returns <see cref="T:System.Collections.Specialized.NameValueCollection" />
            with the application settings
            of the specified external configuration <see cref="T:System.Xml.Linq.XDocument" />.
            </summary>
            <param name="settings">The settings.</param>
            <param name="externalConfigurationDoc">The external configuration document.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.WithConnectionStringSettingsCollection(System.Configuration.ConnectionStringSettingsCollection,System.Xml.Linq.XDocument)">
            <summary>
            Returns <see cref="T:System.Configuration.ConnectionStringSettingsCollection" />
            with the application settings
            of the specified external configuration <see cref="T:System.Xml.Linq.XDocument" />.
            </summary>
            <param name="collection">The collection.</param>
            <param name="externalConfigurationDoc">The external configuration document.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.DataServiceCollectionExtensions">
            <summary>
            Extensions of <see cref="T:System.Data.Services.Client.DataServiceCollection`1"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DataServiceCollectionExtensions.ToObservableCollection``1(System.Data.Services.Client.DataServiceCollection{``0})">
            <summary>
            Converts the specified OData collection into an instance
            of <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceCollection">The service collection.</param>
        </member>
        <member name="T:Songhay.Extensions.DataSetExtensions">
            <summary>
            Extensions of <see cref="T:System.Data.DataSet"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DataSetExtensions.ToFirstTableDataRows(System.Data.DataSet)">
            <summary>
            Converts the <see cref="T:System.Data.DataSet"/> into a first table data rows.
            </summary>
            <param name="dataSet">The data set.</param>
        </member>
        <member name="M:Songhay.Extensions.DataSetExtensions.ToFirstTableFirstColumn(System.Data.DataSet)">
            <summary>
            Converts the <see cref="T:System.Data.DataSet"/> into a first table first column.
            </summary>
            <param name="dataSet">The data set.</param>
        </member>
        <member name="M:Songhay.Extensions.DataSetExtensions.ToFirstTableFirstColumn``1(System.Data.DataSet)">
            <summary>
            Converts the <see cref="T:System.Data.DataSet"/> into a first table first column.
            </summary>
            <typeparam name="TColumn">The type of the column.</typeparam>
            <param name="dataSet">The data set.</param>
        </member>
        <member name="M:Songhay.Extensions.DataSetExtensions.ToFirstTableRows(System.Data.DataSet)">
            <summary>
            Converts the <see cref="T:System.Data.DataSet"/> into a first table rows.
            </summary>
            <param name="dataSet">The data set.</param>
        </member>
        <member name="M:Songhay.Extensions.DataSetExtensions.ToFirstTableRows``2(System.Data.DataSet)">
            <summary>
            Converts the <see cref="T:System.Data.DataSet"/> into a first table rows.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dataSet">The data set.</param>
        </member>
        <member name="T:Songhay.Extensions.DateTimeExtensions">
            <summary>
            Extensions of <see cref="T:System.DateTime"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>
            From Jon Skeet’s Miscellaneous Utility Library
            Copyright (c) 2004-2008 Jon Skeet and Marc Gravell.
            All rights reserved.
            [http://www.pobox.com/~skeet/csharp/miscutil]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.GetNextWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the next weekday.
            </summary>
            <param name="start">The start.</param>
            <param name="day">The day.</param>
            <remarks>
            by Jon Skeet
            
            For more detail, see:
            http://stackoverflow.com/questions/6346119/asp-net-get-the-next-tuesday
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.ToPrettyDate(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> into a “pretty” date.
            </summary>
            <param name="date">The date.</param>
            <remarks>
            This member was taken from NBlog developer, Chris Fulstow.
            [https://github.com/ChrisFulstow/NBlog/blob/master/NBlog.Web/Application/Infrastructure/DateExtensions.cs]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.January(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in January
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.February(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in February
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.March(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in March
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.April(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in April
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.May(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in May
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.June(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in June
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.July(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in July
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.August(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in August
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.September(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in September
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.October(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in October
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.November(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in November
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.December(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in December
            in the specified year.
            </summary>
        </member>
        <member name="T:Songhay.Extensions.DisplayItemModelExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.DisplayItemModel"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DisplayItemModelExtensions.HasGenericWebDocumentCategory(Songhay.Models.DisplayItemModel)">
            <summary>
            Determines whether <see cref="P:Songhay.Models.DisplayItemModel.ItemCategory"/>
            is <see cref="F:Songhay.Models.DisplayItemModelCategories.GenericWebDocument"/>.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.DisplayItemModelExtensions.HasGenericWebFragmentCategory(Songhay.Models.DisplayItemModel)">
            <summary>
            Determines whether <see cref="P:Songhay.Models.DisplayItemModel.ItemCategory"/>
            is <see cref="F:Songhay.Models.DisplayItemModelCategories.GenericWebFragment"/>.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.DisplayItemModelExtensions.HasGenericWebLogCategory(Songhay.Models.DisplayItemModel)">
            <summary>
            Determines whether [has generic web log category] [the specified data].
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.DisplayItemModelExtensions.HasGenericWebSchemaCategory(Songhay.Models.DisplayItemModel)">
            <summary>
            Determines whether [has generic web schema category] [the specified data].
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.DisplayItemModelExtensions.HasGenericWebSegmentCategory(Songhay.Models.DisplayItemModel)">
            <summary>
            Determines whether <see cref="P:Songhay.Models.DisplayItemModel.ItemCategory"/>
            is <see cref="F:Songhay.Models.DisplayItemModelCategories.GenericWebSegment"/>.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.DisplayItemModelExtensions.ToMenuDisplayItemModel(Songhay.Models.DisplayItemModel)">
            <summary>
            Converts the <see cref="T:Songhay.Models.DisplayItemModel"/> into a menu display item model.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.DisplayItemModelExtensions.WithItemCategory(Songhay.Models.DisplayItemModel,System.String)">
            <summary>
            Fluently sets <see cref="P:Songhay.Models.DisplayItemModel.ItemCategory"/>.
            </summary>
            <param name="data">The data.</param>
            <param name="itemCategory">The item category.</param>
        </member>
        <member name="M:Songhay.Extensions.DisplayItemModelExtensions.WithTag(Songhay.Models.DisplayItemModel,System.String)">
            <summary>
            Fluently sets <see cref="P:Songhay.Models.DisplayItemModel.Tag"/>.
            </summary>
            <param name="data">The data.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.EnumExtensions">
            <summary>
            Extensions of <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.EnumExtensions.GetEnumDescription(System.Enum)">
            <summary>
            Gets the enum description.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Songhay.Extensions.EnumExtensions.GetEnumValues(System.Enum)">
            <summary>
            Gets the enum values.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Songhay.Extensions.EnvironmentExtensions">
            <summary>
            Extensions of <see cref="T:System.Environment"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.EnvironmentExtensions.GetConventionalValue(System.String)">
            <summary>
            Gets the conventional value.
            </summary>
            <param name="conventionalName">Name of the conventional.</param>
            <returns>Returns the value of named data.</returns>
        </member>
        <member name="T:Songhay.Extensions.ExpressionExtensions">
            <summary>
            Extensions of <see cref="T:System.Linq.Expressions.Expression"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified this expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisExpression">The this expression.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified this expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisExpression">The this expression.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.FuncExtensions">
            <summary>
            Extensions of <see cref="T:System.Func`1"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.FuncExtensions.And``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Ands the specified <see cref="T:System.Func`1"/> predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisPredicate">The extended <see cref="T:System.Func`1"/> predicate.</param>
            <param name="predicate">The composed <see cref="T:System.Func`1"/> predicate.</param>
        </member>
        <member name="M:Songhay.Extensions.FuncExtensions.AndNot``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Ands the specified <see cref="T:System.Func`1"/> predicate with negation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisPredicate">The extended <see cref="T:System.Func`1"/> predicate.</param>
            <param name="predicate">The composed, negated <see cref="T:System.Func`1"/> predicate.</param>
        </member>
        <member name="M:Songhay.Extensions.FuncExtensions.Or``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Ors the specified <see cref="T:System.Func`1"/> predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisPredicate">The extended <see cref="T:System.Func`1"/> predicate.</param>
            <param name="predicate">The composed <see cref="T:System.Func`1"/> predicate.</param>
        </member>
        <member name="M:Songhay.Extensions.FuncExtensions.OrNot``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Ors the specified <see cref="T:System.Func`1"/> predicate with negation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisPredicate">The extended <see cref="T:System.Func`1"/> predicate.</param>
            <param name="predicate">The composed, negated <see cref="T:System.Func`1"/> predicate.</param>
        </member>
        <member name="T:Songhay.Extensions.ICommunicationObjectExtensions">
            <summary>
            Extensions of <see cref="T:System.ServiceModel.ICommunicationObject"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ICommunicationObjectExtensions.CloseConnection(System.ServiceModel.ICommunicationObject)">
            <summary>
            Closes the connection.
            </summary>
            <param name="serviceClient">The service client.</param>
            <remarks>
            For more detail see “IDisposable and WCF”
            by Steve Smith
            [http://stevesmithblog.com/blog/idisposable-and-wcf/]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.ICommunicationObjectExtensions.CloseConnectionOrAbort(System.ServiceModel.ICommunicationObject)">
            <summary>
            Closes the connection or abort.
            </summary>
            <param name="serviceClient">The service client.</param>
        </member>
        <member name="M:Songhay.Extensions.ICommunicationObjectExtensions.IsOpened(System.ServiceModel.ICommunicationObject)">
            <summary>
            Determines whether the specified service client is opened.
            </summary>
            <param name="serviceClient">The service client.</param>
            <returns>
              <c>true</c> if the specified service client is opened; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Songhay.Extensions.IActivityExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.IActivity"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.GetActivity(System.Collections.Generic.Dictionary{System.String,System.Lazy{Songhay.Models.IActivity}},System.String)">
            <summary>
            Gets the activity.
            </summary>
            <param name="activities">The activities.</param>
            <param name="activityName">Name of the activity.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            The expected Activity name is not here.
            or
            </exception>
        </member>
        <member name="T:Songhay.Extensions.IDictionaryExtensions">
            <summary>
            Extensions of <see cref="T:System.Collections.IDictionary"/>
            </summary>
            <summary>
            Extensions of <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.IDictionaryExtensions.ToStringOrNull(System.Collections.IDictionary,System.String)">
            <summary>
            Converts the <see cref="T:System.Collections.IDictionary"/> into a string or null.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.IDictionaryExtensions.ToValueOrDefault``1(System.Collections.IDictionary,System.String)">
            <summary>
            Converts the <see cref="T:System.Collections.IDictionary"/> into a value or default.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.IDictionaryExtensions.ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            to the <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The set.</param>
            <remarks>
            For detail, see https://stackoverflow.com/a/7230446/22944
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Tries to get value with the specified key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The expected dictionary is not here.</exception>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Boolean)">
            <summary>
            Tries to get value with the specified key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The expected dictionary is not here.</exception>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="T:Songhay.Extensions.IEnumerableOfTExtensions">
            <summary>
            Extensions of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="childGetter">The child getter.</param>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},``0)">
            <summary>
            Flattens the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="childGetter">The child getter.</param>
            <param name="flattenedHead">The flattened head.</param>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.ForEachInEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the <see cref="T:System.Action"/>
            on each item in the enumerable object.
            </summary>
            <typeparam name="TEnumerable">The type of the enumerable.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="action">The action.</param>
            <remarks>
            “I am philosophically opposed to providing such a method, for two reasons.
            …The first reason is that doing so violates the functional programming principles
            that all the other sequence operators are based upon. Clearly the sole purpose of a call
            to this method is to cause side effects.”
            —Eric Lippert, “foreach” vs “ForEach” [http://blogs.msdn.com/b/ericlippert/archive/2009/05/18/foreach-vs-foreach.aspx]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.IsEnumerableType``1(System.Object)">
            <summary>
            Determines whether this instance is enumerable.
            </summary>
            <typeparam name="TEnumerable">The type of the enumerable.</typeparam>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Partitions the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="size">The size.</param>
            <remarks>
            This member is by Jon Skeet.
            [http://stackoverflow.com/questions/438188/split-a-collection-into-n-parts-with-linq]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.SelectWithPrevious``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Projects the previous item with the current item.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
            <remarks>
            “This enables you to perform your projection using only a single pass of the source sequence,
            which is always a bonus (imagine running it over a large log file).
            Note that it will project a sequence of length n into a sequence of length n-1—
            you may want to prepend a ‘dummy’ first element, for example. (Or change the method to include one.)
            Here’s an example of how you'd use it:
            <code>
            var query = list.SelectWithPrevious((prev, cur) =&gt; new { ID = cur.ID, Date = cur.Date, DateDiff = (cur.Date - prev.Date).Days);
            </code>
            Note that this will include the final result of one ID with the first result of the next ID…
            you may wish to group your sequence by ID first.”
            —Jon Skeet, “Calculate difference from previous item with LINQ”
            [http://stackoverflow.com/questions/3683105/calculate-difference-from-previous-item-with-linq/3683217#3683217]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.ToDisplayString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a display string.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.ToDisplayString``1(System.Collections.Generic.IEnumerable{``0},System.Byte)">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a display string.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="data">The data.</param>
            <param name="indent">The indent.</param>
        </member>
        <member name="T:Songhay.Extensions.IIdentityExtensions">
            <summary>
            Extensions of <see cref="T:System.Security.Principal.IIdentity"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.IIdentityExtensions.GetWindowsUserName(System.Security.Principal.IIdentity)">
            <summary>
            Gets the name of the windows user.
            </summary>
        </member>
        <member name="T:Songhay.Extensions.JObjectExtensions">
            <summary>
            Extensions of <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetDictionary(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <param name="jsonObject">The json object.</param>
            <param name="dictionaryPropertyName">Name of the dictionary property.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetDictionary(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <param name="jsonObject">The json object.</param>
            <param name="dictionaryPropertyName">Name of the dictionary property.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">dictionaryPropertyName;The expected Dictionary Property Name is not here.</exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetDictionary(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <param name="jsonObject">The json object.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetDictionary(Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <param name="jsonObject">The json object.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">jsonObject;The expected JObject is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJArray(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JArray" /> or will throw <see cref="T:System.FormatException"/>.
            </summary>
            <param name="jsonObject">The json object.</param>
            <param name="arrayPropertyName">Name of the array property.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJArray(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
            <param name="jsonObject">The json object.</param>
            <param name="arrayPropertyName">Name of the array property.</param>
            <param name="throwException">if set to <c>true</c> throw <see cref="T:System.FormatException"/>.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">arrayPropertyName;The expected JArray Property Name is not here.</exception>
            <exception cref="T:System.FormatException">
            </exception>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJToken(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="jsonObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="objectPropertyName">Name of the object property.</param>
            <param name="throwException">if set to <c>true</c> throw exception.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            jsonObject;The expected JObject is not here.
            or
            objectPropertyName;The expected property name is not here.
            </exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJTokenFromJArray(Newtonsoft.Json.Linq.JObject,System.String,System.String,System.Int32)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> from <see cref="T:Newtonsoft.Json.Linq.JArray" /> or will throw <see cref="T:System.FormatException"/>.
            </summary>
            <param name="jsonObject">The json object.</param>
            <param name="arrayPropertyName">Name of the array property.</param>
            <param name="objectPropertyName">Name of the object property.</param>
            <param name="arrayIndex">Index of the array.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJTokenFromJArray(Newtonsoft.Json.Linq.JObject,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> from <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
            <param name="jsonObject">The json object.</param>
            <param name="arrayPropertyName">Name of the array property.</param>
            <param name="objectPropertyName">Name of the object property.</param>
            <param name="arrayIndex">Index of the array.</param>
            <param name="throwException">if set to <c>true</c> throw <see cref="T:System.FormatException"/>.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">objectPropertyName;The expected JObject Property Name is not here.</exception>
        </member>
        <member name="T:Songhay.Extensions.MenuDisplayItemModelExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.MenuDisplayItemModel"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.MenuDisplayItemModelExtensions.DefaultOrFirst(System.Collections.Generic.IEnumerable{Songhay.Models.MenuDisplayItemModel})">
            <summary>
            Returns the Default Selection
            <c>IsDefaultSelection == true</c>
            or the First <see cref="T:Songhay.Models.MenuDisplayItemModel"/>.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.MenuDisplayItemModelExtensions.GetDeepCopy(Songhay.Models.MenuDisplayItemModel)">
            <summary>
            Gets the deep copy.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
            <remarks>
            This is useful in Silverlight.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.MenuDisplayItemModelExtensions.WithChildItem(Songhay.Models.MenuDisplayItemModel,Songhay.Models.MenuDisplayItemModel)">
            <summary>
            Fluently returns <see cref="T:Songhay.Models.MenuDisplayItemModel" /> with child item.
            </summary>
            <param name="data">The data.</param>
            <param name="child">The child.</param>
        </member>
        <member name="M:Songhay.Extensions.MenuDisplayItemModelExtensions.WithChildItems(Songhay.Models.MenuDisplayItemModel,Songhay.Models.MenuDisplayItemModel[])">
            <summary>
            Fluently returns <see cref="T:Songhay.Models.MenuDisplayItemModel" /> with child items.
            </summary>
            <param name="data">The data.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:Songhay.Extensions.MenuDisplayItemModelExtensions.WithChildItems(Songhay.Models.MenuDisplayItemModel,System.Collections.Generic.List{Songhay.Models.MenuDisplayItemModel})">
            <summary>
            Fluently returns <see cref="T:Songhay.Models.MenuDisplayItemModel" /> with child items.
            </summary>
            <param name="data">The data.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:Songhay.Extensions.MenuDisplayItemModelExtensions.WithoutChildren(Songhay.Models.MenuDisplayItemModel)">
            <summary>
            Fluently returns <see cref="T:Songhay.Models.MenuDisplayItemModel" /> without children.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:Songhay.Extensions.NullableExtensions">
            <summary>
            Extensions of <c>Nullable</c> types.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.NullableExtensions.Round(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            Rounds the specified decimal.
            </summary>
            <param name="decimalValue">The decimal value.</param>
            <param name="decimals">The decimals.</param>
            <returns></returns>
            <remarks>
            For more detail see http://anderly.com/2009/08/08/silverlight-midpoint-rounding-solution/
            </remarks>
        </member>
        <member name="T:Songhay.Extensions.ObjectExtensions">
            <summary>
            Extensions of <see cref="T:System.Object"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ObjectExtensions.IsType``1(System.Object)">
            <summary>
            Determines whether this instance is type.
            </summary>
            <typeparam name="TClass">The type of the class.</typeparam>
            <param name="objectOfDomain">The object of domain.</param>
        </member>
        <member name="M:Songhay.Extensions.ObjectExtensions.ToObjectOrDBNull(System.Object)">
            <summary>
            Boxes the value in object or returns <see cref="T:System.DBNull"/>.
            </summary>
            <param name="objectOfDomain">The object of domain.</param>
        </member>
        <member name="M:Songhay.Extensions.ObjectExtensions.GetProperties(System.Object)">
            <summary>
            Gets the properties.
            </summary>
            <param name="objectWithProperties">The object with properties.</param>
        </member>
        <member name="M:Songhay.Extensions.ObjectExtensions.GetProperty(System.Object,System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="objectWithProperties">The object with properties.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Songhay.Extensions.ObjectExtensions.GetPropertyValue(System.Object,System.String)">
             <summary>
             Gets the property value.
             </summary>
             <param name="objectWithProperties">The object with properties.</param>
             <param name="propertyName">Name of the property.</param>
             <remarks>
             Very useful for an MVVM situation like this:
             <code>
                 var command = this.DataContext.GetPropertyValue("MyCommand") as ICommand;
             </code>
            
             Note that this member uses <c>property.GetValue(objectWithProperties, index: null)</c>.
             Passing null is “fine for normal simple properties, this will fail with indexer properties,
             which take a non-null argument list as specified by <c>PropertyInfo.GetIndexParameters</c>.”
             [https://stackoverflow.com/a/1355110/22944]
             </remarks>
        </member>
        <member name="T:Songhay.Extensions.ObservableCollectionExtensions">
            <summary>
            Extensions of <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ObservableCollectionExtensions.SetCollectionWithDigits(System.Collections.ObjectModel.ObservableCollection{System.Nullable{System.Byte}},System.Double)">
            <summary>
            Sets the collection with digits.
            </summary>
            <param name="collectionOfByte">The collection of byte.</param>
            <param name="digits">The digits.</param>
        </member>
        <member name="T:Songhay.Extensions.OpenAuthorizationDataExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.OpenAuthorizationData"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.OpenAuthorizationDataExtensions.GetTwitterBaseUriWithScreenName(System.Uri,System.String)">
            <summary>
            Gets the name of the twitter base URI with screen.
            </summary>
            <param name="twitterBaseUri">The twitter base URI.</param>
            <param name="screenName">Name of the screen.</param>
        </member>
        <member name="M:Songhay.Extensions.OpenAuthorizationDataExtensions.GetTwitterBaseUriWithScreenName(System.Uri,System.String,System.Int32)">
            <summary>
            Gets the name of the twitter base URI with screen.
            </summary>
            <param name="twitterBaseUri">The twitter base URI.</param>
            <param name="screenName">Name of the screen.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Songhay.Extensions.OpenAuthorizationDataExtensions.GetTwitterRequestHeader(Songhay.Models.OpenAuthorizationData,System.Uri,System.String,System.String)">
            <summary>
            Gets the twitter request header.
            </summary>
            <param name="data">The data.</param>
            <param name="twitterBaseUri">The twitter base URI.</param>
            <param name="screenName">Name of the screen.</param>
            <param name="httpMethod">The HTTP method.</param>
        </member>
        <member name="T:Songhay.Extensions.RestApiMetadataExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.RestApiMetadata"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.RestApiMetadataExtensions.ToUri(Songhay.Models.RestApiMetadata,System.String,System.String[])">
            <summary>
            To the URI.
            </summary>
            <param name="meta">The meta.</param>
            <param name="uriTemplateKey">The URI template key.</param>
            <param name="bindByPositionValues">The bind by position values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">bindByPositionValues;The expected bind-by-position values are not here.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The expected REST API metadata URI template key is not here.</exception>
        </member>
        <member name="T:Songhay.Extensions.ProgramArgsExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.ProgramArgs"/>
            </summary>
            <summary>
            Extensions of <see cref="T:Songhay.Models.ProgramArgs"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.GetArgValue(Songhay.Models.ProgramArgs,System.String)">
            <summary>
            Gets the argument value.
            </summary>
            <param name="args">The arguments.</param>
            <param name="arg">The argument.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.HasArg(Songhay.Models.ProgramArgs,System.String,System.Boolean)">
            <summary>
            Determines whether the specified <see cref="T:Songhay.Models.ProgramArgs"/> has argument.
            </summary>
            <param name="args">The <see cref="T:Songhay.Models.ProgramArgs"/>.</param>
            <param name="arg">The argument.</param>
            <param name="requiresValue">if set to <c>true</c> [requires value].</param>
            <returns>
              <c>true</c> if the specified argument has argument; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.IsHelpRequest(Songhay.Models.ProgramArgs)">
            <summary>
            Determines whether args contain the <see cref="F:Songhay.Models.ProgramArgs.Help"/> flag.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.ToConfigurationKey(Songhay.Models.ProgramArgs,System.String)">
            <summary>
            Converts the <c>args</c> key to a conventional Configuration key.
            </summary>
            <param name="args">The arguments.</param>
            <param name="argKey">The arguments key.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">The expected argument key is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.ToHelpDisplayText(Songhay.Models.ProgramArgs)">
            <summary>
            Converts the <c>args</c> key any help text.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.GetBasePathValue(Songhay.Models.ProgramArgs)">
            <summary>
            Gets the conventional base-path value.
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.GetSettingsFilePath(Songhay.Models.ProgramArgs)">
            <summary>
            Gets the conventional settings file path.
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.StringBuilderExtensions">
            <summary>
            Extensions of <see cref="T:System.Text.StringBuilder"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.StringBuilderExtensions.AppendLabelWithValue(System.Text.StringBuilder,System.String,System.Object)">
            <summary>
            Appends the label with value.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Songhay.Extensions.StringBuilderExtensions.AppendLabelWithValue(System.Text.StringBuilder,System.String,System.Object,System.String)">
            <summary>
            Appends the label with value.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Songhay.Extensions.StringBuilderExtensions.AppendLabelWithValue(System.Text.StringBuilder,System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Appends the label with value.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <param name="hasLineBreak">When <c>true</c> add <see cref="P:System.Environment.NewLine" /> between label and value.</param>
            <remarks>
            This method will append <c>name: value</c> to the appending <see cref="T:System.Text.StringBuilder"/>.
            This is useful when overriding <see cref="M:System.Object.ToString"/>.
            </remarks>
        </member>
        <member name="T:Songhay.Extensions.StringExtensions">
            <summary>
            Extensions of <see cref="T:System.String"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.String"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.String"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.String"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.EscapeInterpolation(System.String)">
            <summary>
            Escapes the interpolation tokens of <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.FromCamelCaseToEnumerable(System.String)">
            <summary>
            Converts camel-case <see cref="T:System.String"/> to <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.In(System.String,System.String)">
            <summary>
            Determines whether the specified input is in the comma-delimited values.
            </summary>
            <param name="input">The input.</param>
            <param name="delimitedValues">The delimited values.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.In(System.String,System.String,System.Char)">
            <summary>
            Determines whether the specified input is in the delimited values.
            </summary>
            <param name="input">The input.</param>
            <param name="delimitedValues">The delimited values.</param>
            <param name="separator">The separator.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.InDoubleQuotes(System.String)">
            <summary>
            Ins the double quotes.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.InDoubleQuotesOrDefault(System.String,System.String)">
            <summary>
            Ins the double quotes or default.
            </summary>
            <param name="input">The input.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.InsertSpacesBeforeCaps(System.String)">
            <summary>
            Inserts the spaces before caps.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsByte(System.String)">
            <summary>
            Determines whether the specified input is byte.
            </summary>
            <param name="input">The input.</param>
            <returns>
            	<c>true</c> if the specified input is byte; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsByte(System.String,System.Predicate{System.Byte})">
            <summary>
            Determines whether the specified input is byte.
            </summary>
            <param name="input">The input.</param>
            <param name="secondaryTest">The secondary test.</param>
            <returns>
            	<c>true</c> if the specified input is byte; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsDecimal(System.String)">
            <summary>
            Determines whether the specified input is decimal.
            </summary>
            <param name="input">The input.</param>
            <returns>
            	<c>true</c> if the specified input is decimal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsDecimal(System.String,System.Predicate{System.Decimal})">
            <summary>
            Determines whether the specified input is decimal.
            </summary>
            <param name="input">The input.</param>
            <param name="secondaryTest">The secondary test.</param>
            <returns>
            	<c>true</c> if the specified input is decimal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsInteger(System.String)">
            <summary>
            Determines whether the specified input is integer.
            </summary>
            <param name="input">The input.</param>
            <returns>
              <c>true</c> if the specified input is integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsInteger(System.String,System.Predicate{System.Int32})">
            <summary>
            Determines whether the specified input is integer.
            </summary>
            <param name="input">The input.</param>
            <param name="secondaryTest">The secondary test.</param>
            <returns>
              <c>true</c> if the specified input is integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsLong(System.String)">
            <summary>
            Determines whether the specified input is long.
            </summary>
            <param name="input">The input.</param>
            <returns>
            	<c>true</c> if the specified input is long; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsLong(System.String,System.Predicate{System.Int64})">
            <summary>
            Determines whether the specified input is long.
            </summary>
            <param name="input">The input.</param>
            <param name="secondaryTest">The secondary test.</param>
            <returns>
            	<c>true</c> if the specified input is long; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsTelephoneNumber(System.String)">
            <summary>
            Determines whether the specified input is a telephone number.
            </summary>
            <param name="input">The input.</param>
            <returns>
              <c>true</c> if is telephone number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.LooksLikeEmailAddress(System.String)">
            <summary>
            Determines whether the specified input looks like an email address.
            </summary>
            <param name="input">The input.</param>
            <returns>
              <c>true</c> if seems to be an email address; otherwise, <c>false</c>.
            </returns>
            <remarks>
            “In short, don’t expect a single, usable regex to do a proper job.
            And the best regex will validate the syntax, not the validity
            of an e-mail (jhohn@example.com is correct but it will probably bounce…).”
            [http://stackoverflow.com/questions/201323/how-to-use-a-regular-expression-to-validate-an-email-addresses]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToBlogSlug(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> into a blog slug.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.CsvSplit(System.String)">
            <summary>
            Splits CSV text format into an array of <see cref="T:System.String"/>.
            </summary>
            <param name="source">The source.</param>
            <remarks>
            This code is based on “LINQ to TEXT and LINQ to CSV” by Eric Lippert
            [http://blogs.msdn.com/b/ericwhite/archive/2008/09/30/linq-to-text-and-linq-to-csv.aspx]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.Reverse(System.String)">
            <summary>
            Reverse the string
            from http://en.wikipedia.org/wiki/Extension_method
            </summary>
            <param name="input"></param>
            <remarks>
            From Tomas Kubes, http://www.codeproject.com/Articles/31050/String-Extension-Collection-for-C
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.Reduce(System.String,System.Int32,System.String)">
            <summary>
            Reduce string to shorter preview which is optionally ended by some string (...).
            </summary>
            <param name="s">string to reduce</param>
            <param name="count">Length of returned string including endings.</param>
            <param name="endings">optional endings of reduced text</param>
            <example>
            string description = "This is very long description of something";
            string preview = description.Reduce(20,"...");
            produce -> "This is very long..."
            </example>
            <remarks>
            From Tomas Kubes, http://www.codeproject.com/Articles/31050/String-Extension-Collection-for-C
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(System.String)">
            <summary>
            Converts the <see cref="T:System.String" /> into a ASCII letters with spacer.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String" /> into ASCII letters with spacer.
            </summary>
            <param name="input">The input.</param>
            <param name="spacer">The spacer.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToDigitsOnly(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> into digits only.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToIntString(System.String)">
            <summary>
            Prepares a string to be converted to <c>int</c>.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToIntString(System.String,System.String)">
            <summary>
            Prepares a string to be converted to <c>int</c>.
            </summary>
            <param name="input">The input.</param>
            <param name="defaultValue">The default value ("0" by default).</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToSubstringInContext(System.String,System.String,System.Int32)">
            <summary>
            Formats the <see cref="T:System.String"/> into a shortened form,
            showing the search text in context.
            </summary>
            <param name="input">The input.</param>
            <param name="searchText">The search text.</param>
            <param name="contextLength">Length of the context.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.UnwrapForRiaEndpoint(System.String,System.String)">
            <summary>
            Unwraps for RIA endpoint.
            </summary>
            <param name="input">The input.</param>
            <param name="riaEndpointName">Name of the RIA endpoint.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.WrapForRiaEndpoint(System.String,System.String)">
            <summary>
            Wraps for RIA endpoint input.
            </summary>
            <param name="input">The input.</param>
            <param name="riaParameter">The RIA parameter.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToNumericString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> into a numeric format for parsing.
            </summary>
            <param name="input">The input.</param>
            <returns>
            Returns a numeric string ready for integer or float parsing.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToNumericString(System.String,System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> into a numeric format for parsing.
            </summary>
            <param name="input">The input.</param>
            <param name="defaultValue">The default value ("0" by default).</param>
            <returns>
            Returns a numeric string ready for integer or float parsing.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Remove accent from strings 
            </summary>
            <example>
             input:  "Příliš žluťoučký kůň úpěl ďábelské ódy."
             result: "Prilis zlutoucky kun upel dabelske ody."
            </example>
            <param name="s"></param>
            <remarks>
            From Tomas Kubes, http://www.codeproject.com/Articles/31050/String-Extension-Collection-for-C
            Also, see http://stackoverflow.com/questions/249087/how-do-i-remove-diacritics-accents-from-a-string-in-net
            </remarks>
            <returns>string without accents</returns>
        </member>
        <member name="T:Songhay.Extensions.TaskExtensions">
            <summary>
            Extensions of <see cref="T:System.Threading.Tasks.Task"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.TaskExtensions.Delay(System.Threading.Tasks.Task,System.TimeSpan,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Delays with a <see cref="T:System.Threading.Timer"/> task for the specified <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="task">Instance of </param>
            <param name="timeSpan">The specified timespan</param>
            <param name="actionAfterDelay">The continuation action</param>
        </member>
        <member name="M:Songhay.Extensions.TaskExtensions.Delay(System.Threading.Tasks.Task,System.TimeSpan,System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
             <summary>
             Delays with a <see cref="T:System.Threading.Timer"/> task for the specified <see cref="T:System.TimeSpan"/>.
             </summary>
             <param name="task">Instance of </param>
             <param name="timeSpan">The specified timespan</param>
             <param name="actionAfterDelay">The continuation action</param>
             <param name="schedulerAfterDelay">Work-queue scheduler</param>
             <remarks>
             The syntax to get this running may seem a bit strange:
            
                 this._delayTask = this._delayTask.Delay(TimeSpan.FromSeconds(1), i =>
                 {
                     //do stuff after one second…
                 });
             
             This is done to both initialize the Task and then return its reference until the Task is completed.
            
             </remarks>
        </member>
        <member name="T:Songhay.Extensions.TimeSpanExtensions">
            <summary>
            Extensions of <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.TimeSpanExtensions.ListDays(System.TimeSpan)">
            <summary>
            Lists the days for the specified <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Songhay.Extensions.TimeSpanExtensions.ListDays(System.TimeSpan,System.DateTime)">
            <summary>
            Lists the days for the specified <see cref="T:System.TimeSpan"/>
            from the specified start <see cref="T:System.DateTime"/>.
            </summary>
            <param name="span">The span.</param>
            <param name="startDate">The start date.</param>
        </member>
        <member name="T:Songhay.Extensions.TraceSourceExtensions">
            <summary>
            Extensions of <see cref="T:System.Diagnostics.TraceSource"/>
            </summary>
            <remarks>
            Based on Fonlow.Diagnostics by Zijian Huang [https://github.com/zijianhuang/Fonlow.Diagnostics]
            Also see “Use TraceSource Efficiently” [http://www.codeproject.com/Tips/1071853/Use-TraceSource-Efficiently]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.EnsureTraceSource(System.Diagnostics.TraceSource)">
            <summary>
            Ensures the trace source.
            </summary>
            <param name="traceSource">The trace source.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">The expected Trace Source is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceData(System.Diagnostics.TraceSource,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Traces the data.
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="eventType">Type of the event.</param>
            <param name="id">The identifier.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceData(System.Diagnostics.TraceSource,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Traces the data.
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="eventType">Type of the event.</param>
            <param name="id">The identifier.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Traces the error.
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Traces the error.
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.Exception)">
            <summary>
            Traces the error.
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceTransfer(System.Diagnostics.TraceSource,System.Int32,System.String,System.Guid)">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Transfer"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <param name="relatedActivityId">The related activity identifier.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Warning"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Warning"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Verbose"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Verbose"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.WithAllSourceLevels(System.Diagnostics.TraceSource)">
            <summary>
            Returns the <see cref="T:System.Diagnostics.TraceSource"/>
            with Switch Level <see cref="F:System.Diagnostics.SourceLevels.All"/>.
            </summary>
            <param name="traceSource">The trace source.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.WithTraceSource(System.Diagnostics.TraceSource,System.Diagnostics.SourceLevels)">
            <summary>
            Returns the <see cref="T:System.Diagnostics.TraceSource"/>
            with a single Switch Level.
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.WriteLine(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Information"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="message">The message.</param>
            <remarks>
            This member has a null check unlike <see cref="M:System.Diagnostics.TraceSource.TraceInformation(System.String)"/>
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.WriteLine(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Information"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <remarks>
            This member has a null check unlike <see cref="M:System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])"/>
            </remarks>
        </member>
        <member name="T:Songhay.Extensions.TraceSourcesExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Diagnostics.TraceSources"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.TraceSourcesExtensions.GetConfiguredTraceSource(Songhay.Diagnostics.TraceSources)">
            <summary>
            Gets the configured trace source.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.TraceSourcesExtensions.GetConfiguredTraceSource(Songhay.Diagnostics.TraceSources,System.String)">
            <summary>
            Gets the configured trace source.
            </summary>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="T:Songhay.Extensions.UriBuilderExtensions">
            <summary>
            Extensions of <see cref="T:System.UriBuilder"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.UriBuilderExtensions.WithPath(System.UriBuilder,System.String)">
            <summary>
            Returns <see cref="T:System.UriBuilder"/>
            with the specified path.
            </summary>
            <param name="builder">The builder.</param>
            <param name="path">The path.</param>
        </member>
        <member name="T:Songhay.Extensions.UriExtensions">
            <summary>
            Extensions of <see cref="T:System.Uri"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.UriExtensions.IsProbablyAFile(System.Uri)">
            <summary>
            Determines whether the <see cref="T:System.Uri" /> is a file.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
            <remarks>
            Recall that <see cref="P:System.Uri.IsFile" /> is another way
            of stating that <c>Uri.Schema == Uri.UriSchemeFile</c>
            and that <see cref="N:System.IO"/> members can process URIs.
            
            Also note that the only way to truly define a directory
            or folder is with a trailing forward/back slash.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.UriExtensions.ToBaseUri(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri" /> into a base URI.
            </summary>
            <param name="input">The input.</param>
            <returns>
            Returns <see cref="T:System.String"/> like: <c>https://MyServer:8080/</c>
            </returns>
        </member>
        <member name="M:Songhay.Extensions.UriExtensions.ToRelativeUriFromQuery(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> into a relative URI from query.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:Songhay.Extensions.XElementExtensions">
            <summary>
            Extensions of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.AddOnce(System.Xml.Linq.XElement,System.Xml.Linq.XAttribute)">
            <summary>
            Adds the once.
            </summary>
            <param name="element">The element.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.GetElement(System.Xml.Linq.XNode,System.Xml.Linq.XName)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="node">The node.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.HasElementName(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Determines whether the <see cref="T:System.Xml.Linq.XElement"/>
            has the specified <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> when the element has the name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.HasElementName(System.Xml.Linq.XNode,System.Xml.Linq.XName)">
            <summary>
            Determines whether the <see cref="T:System.Xml.Linq.XNode"/>
            has the specified <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <param name="node">The node.</param>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> when the node has the name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.IsElement(System.Xml.Linq.XNode)">
            <summary>
            Determines whether the specified node is <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if the specified node is element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.ToAttributeValueOrDefault(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Converts the <see cref="T:System.Xml.Linq.XElement" /> into a attribute value or default.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.ToAttributeValueOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns the attribute value or null.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.ToElementValueOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Converts the <see cref="T:System.Xml.Linq.XElement" /> into a element value or default.
            </summary>
            <param name="element">The element.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.ToElementValueOrNull(System.Xml.Linq.XElement)">
            <summary>
            Converts the <see cref="T:System.Xml.Linq.XElement" /> into a element value or null.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.ToElementValueOrNull(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Returns the element value or null.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.WithoutNamespaces(System.Xml.Linq.XElement)">
            <summary>
            Returns the specified <see cref="T:System.Xml.Linq.XElement"/>
            without namespace qualifiers on elements and attributes.
            </summary>
            <param name="element">The element</param>
            <remarks>
            Based on “Answer: How to remove all namespaces from XML with C#?”
            [http://stackoverflow.com/a/7238007/22944?stw=2]
            </remarks>
        </member>
        <member name="T:Songhay.Extensions.XNamespaceExtensions">
            <summary>
            Extensions of <see cref="T:System.Xml.Linq.XNamespace"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.XNamespaceExtensions.ToXName(System.Xml.Linq.XNamespace,System.String)">
            <summary>
            Converts the <see cref="T:System.Xml.Linq.XNamespace"/> to an <see cref="T:System.Xml.Linq.XName"/>
            with the specified element name.
            </summary>
            <param name="ns">The ns.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="T:Songhay.Extensions.XNodeExtensions">
            <summary>
            Extensions of <see cref="T:System.Xml.Linq.XNode"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.XNodeExtensions.GetInnerXml(System.Xml.Linq.XNode)">
            <summary>
            Gets the inner XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Songhay.Extensions.XNodeExtensions.GetInnerXml(System.Xml.Linq.XNode,System.Boolean,System.Xml.Linq.ReaderOptions)">
            <summary>
            Gets the inner XML.
            </summary>
            <param name="node">The node.</param>
            <param name="stripNamespaces">if set to <c>true</c> then strip namespaces (<c>true</c> by default).</param>
            <param name="options">The options (<see cref="F:System.Xml.Linq.ReaderOptions.None"/> by default).</param>
            <remarks>
            “If performance is important (e.g. lots of XML, parsed frequently), I'd use Daniel's CreateReader method every time.”
            [http://stackoverflow.com/questions/3793/best-way-to-get-innerxml-of-an-xelement]
            —Luke Sampson
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.XNodeExtensions.GetNamespaceResolver(System.Xml.Linq.XNode)">
            <summary>
            Gets <see cref="T:System.Xml.IXmlNamespaceResolver"/> from the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Songhay.Extensions.XNodeExtensions.GetOuterXml(System.Xml.Linq.XNode)">
            <summary>
            Gets the outer XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Songhay.Extensions.XNodeExtensions.GetOuterXml(System.Xml.Linq.XNode,System.Boolean,System.Xml.Linq.ReaderOptions)">
            <summary>
            Gets the outer XML.
            </summary>
            <param name="node">The node.</param>
            <param name="stripNamespaces">if set to <c>true</c> then strip namespaces (<c>true</c> by default).</param>
            <param name="options">The options (<see cref="F:System.Xml.Linq.ReaderOptions.None"/> by default).</param>
        </member>
        <member name="T:Songhay.ServiceModel.BasicHttpBinaryBinding">
            <summary>
            Represents a basic http binding with binary encoding.
            </summary>
            <remarks>
            For more, see “BasicHttpBinaryBinding for Silverlight”
            by Beat Kiener
            [http://blog.thekieners.com/2009/05/22/basichttpbinarybinding-for-silverlight/]
            </remarks>
        </member>
        <member name="M:Songhay.ServiceModel.BasicHttpBinaryBinding.#ctor">
            <summary>
             Initializes a new instance of the BasicHttpBinaryBinding class.
            </summary>
        </member>
        <member name="M:Songhay.ServiceModel.BasicHttpBinaryBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
            <summary>
            Initializes a new instance of the BasicHttpBinaryBinding class.
            </summary>
            <param name="securityMode">
            The value of System.ServiceModel.BasicHttpSecurityMode that specifies
            the type of security that is used with the SOAP message and for the client.
            </param>
        </member>
        <member name="M:Songhay.ServiceModel.BasicHttpBinaryBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode,System.Boolean)">
            <summary>
            Initializes a new instance of the BasicHttpBinaryBinding class.
            </summary>
            <param name="securityMode">
            The value of System.ServiceModel.BasicHttpSecurityMode that specifies
            the type of security that is used with the SOAP message and for the client.
            </param>
            <param name="binaryEncoding">
            Indicates whether the binary encoding is enabled or not
            </param>
        </member>
        <member name="P:Songhay.ServiceModel.BasicHttpBinaryBinding.BinaryEncoding">
            <summary>
            Gets or sets a value that indicates whether the binary encoding is enabled or not. Default is true.
            </summary>
        </member>
        <member name="M:Songhay.ServiceModel.BasicHttpBinaryBinding.CreateBindingElements">
            <summary>
            Returns an ordered collection of binding elements contained in the current binding.
            </summary>
        </member>
        <member name="T:Songhay.Diagnostics.TraceSources">
            <summary>
            Singleton wrapper for <see cref="T:System.Diagnostics.TraceSource"/>
            </summary>
            <remarks>
            Based on Fonlow.Diagnostics by Zijian Huang [https://github.com/zijianhuang/Fonlow.Diagnostics]
            Also see “Use TraceSource Efficiently” [http://www.codeproject.com/Tips/1071853/Use-TraceSource-Efficiently]
            </remarks>
        </member>
        <member name="P:Songhay.Diagnostics.TraceSources.ConfiguredTraceSourceName">
            <summary>
            The configured trace source name
            </summary>
        </member>
        <member name="P:Songhay.Diagnostics.TraceSources.IsConfiguredTraceSourceNameLoaded">
            <summary>
            The is configured trace source name loaded?
            </summary>
        </member>
        <member name="M:Songhay.Diagnostics.TraceSources.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Songhay.Diagnostics.TraceSources"/> class from being created.
            </summary>
        </member>
        <member name="M:Songhay.Diagnostics.TraceSources.GetTraceSourceFromConfiguredName">
            <summary>
            Gets the name of the trace source from configuration.
            </summary>
            <returns></returns>
            <remarks>
            When the trace source name is not configured
            then <see cref="F:Songhay.Diagnostics.TraceSources.DefaultTraceSourceName"/> is used.
            </remarks>
        </member>
        <member name="M:Songhay.Diagnostics.TraceSources.GetTraceSource(System.String)">
            <summary>
            Gets the trace source.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Songhay.Diagnostics.TraceSources.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceSource"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceSource"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Songhay.Diagnostics.TraceSources.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="T:Songhay.CsvParseException">
            <summary>
            Exception for CSV parsing
            in <see cref="M:Songhay.Extensions.StringExtensions.CsvSplit(System.String)"/>.
            </summary>
        </member>
        <member name="M:Songhay.CsvParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.CsvParseException"/> class.
            </summary>
        </member>
        <member name="M:Songhay.CsvParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.CsvParseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Songhay.CsvParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.CsvParseException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Songhay.CsvParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.CsvParseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Songhay.ExpressionSeed">
            <summary>
            Seeds of <see cref="T:System.Linq.Expressions.Expression"/>
            </summary>
        </member>
        <member name="M:Songhay.ExpressionSeed.True``1">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> <c>true</c>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Songhay.ExpressionSeed.False``1">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> <c>false</c>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Songhay.FuncSeed">
            <summary>
            Functor seeds
            </summary>
        </member>
        <member name="M:Songhay.FuncSeed.True``1">
            <summary>
            Predicate Functor for <c>true</c>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Songhay.FuncSeed.False``1">
            <summary>
            Predicate Functor for <c>false</c>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Songhay.Globalization.TextInfoUtility">
            <summary>
            Helper members for <see cref="T:System.Globalization.TextInfo" />.
            </summary>
        </member>
        <member name="M:Songhay.Globalization.TextInfoUtility.ToTitleCase(System.String)">
            <summary>
            Wraps <see cref="M:System.Globalization.TextInfo.ToTitleCase(System.String)"/>
            to add support for articles, conjunctions and prepositions.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="P:Songhay.Globalization.TextInfoUtility.EnglishWordsNotCapitalized">
            <summary>
            “A virtually complete list of English words that are are NOT capitalized in titles.”
            [http://www.cumbrowski.com/CarstenC/articles/20070623_Title_Capitalization_in_the_English_Language.asp]
            </summary>
        </member>
        <member name="T:Songhay.Models.BackgroundWorkerUtilityData">
            <summary>
            Defines the meta-data
            for <see cref="T:Songhay.ComponentModel.BackgroundWorkerUtility"/>.
            </summary>
        </member>
        <member name="P:Songhay.Models.BackgroundWorkerUtilityData.Input">
            <summary>
            Gets or sets the input.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:Songhay.Models.BackgroundWorkerUtilityData.Output">
            <summary>
            Gets or sets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:Songhay.Models.BackgroundWorkerUtilityData.Progress">
            <summary>
            Gets or sets the progress.
            </summary>
            <value>The progress.</value>
        </member>
        <member name="T:Songhay.Models.ActivitiesGetter">
            <summary>
            Defines the in-memory storage
            and getting of <see cref="T:Songhay.Models.IActivity"/> types.
            </summary>
        </member>
        <member name="M:Songhay.Models.ActivitiesGetter.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.ActivitiesGetter" /> class.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="P:Songhay.Models.ActivitiesGetter.Args">
            <summary>
            Gets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="M:Songhay.Models.ActivitiesGetter.GetActivity">
            <summary>
            Gets the <see cref="T:Songhay.Models.IActivity"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Songhay.Models.ActivitiesGetter.GetActivity(System.String)">
            <summary>
            Gets the <see cref="T:Songhay.Models.IActivity"/>.
            </summary>
            <param name="activityName">Name of the <see cref="T:Songhay.Models.IActivity"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Models.ActivitiesGetter.LoadActivities(System.Collections.Generic.Dictionary{System.String,System.Lazy{Songhay.Models.IActivity}})">
            <summary>
            Loads the activities.
            </summary>
            <param name="activities">The activities.</param>
        </member>
        <member name="T:Songhay.Models.ColorDisplayItemModel">
            <summary>
            Model for color display
            </summary>
        </member>
        <member name="P:Songhay.Models.ColorDisplayItemModel.BackgroundHex">
            <summary>
            Gets or sets the background hexadecimal value.
            </summary>
            <value>The background hexadecimal value.</value>
        </member>
        <member name="P:Songhay.Models.ColorDisplayItemModel.ForegroundHex">
            <summary>
            Gets or sets the foreground hexadecimal value.
            </summary>
            <value>The foreground hexadecimal value.</value>
        </member>
        <member name="T:Songhay.Models.DataParameterMetadata">
            <summary>
            A JSON.net-friendly definition for types implementing <see cref="T:System.Data.IDataParameter"/>.
            </summary>
        </member>
        <member name="M:Songhay.Models.DataParameterMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.DataParameterMetadata"/> class.
            </summary>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.DataRowVersion">
            <summary>
            Gets or sets the data row version.
            </summary>
            <value>
            The data row version.
            </value>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.DbType">
            <summary>
            Gets or sets the type of the database.
            </summary>
            <value>
            The type of the database.
            </value>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.ParameterDirection">
            <summary>
            Gets or sets the parameter direction.
            </summary>
            <value>
            The parameter direction.
            </value>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <value>
            The name of the parameter.
            </value>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.ParameterValue">
            <summary>
            Gets or sets the parameter value.
            </summary>
            <value>
            The parameter value.
            </value>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.SourceColumn">
            <summary>
            Gets or sets the source column.
            </summary>
            <value>
            The source column.
            </value>
        </member>
        <member name="T:Songhay.Models.DeploymentEnvironment">
            <summary>
            Defines the deployment environment
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.ConfigurationKey">
            <summary>
            The configuration key
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.ConfigurationKeyDelimiter">
            <summary>
            The configuration key delimiter
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.DefaultTraceSourceNameConfigurationKey">
            <summary>
            The default trace source name configuration key
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.DevelopmentEnvironmentName">
            <summary>
            The development environment name
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.StagingEnvironmentName">
            <summary>
            The staging environment name
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.ProductionEnvironmentName">
            <summary>
            The production environment name
            </summary>
        </member>
        <member name="T:Songhay.Models.DisplayItemModel">
            <summary>
            Model for display item
            </summary>
            <remarks>
            This class was originally developed
            to compensate for RIA Services not supporting composition
            of Entity Framework entities
            where an Entity is the property of another object.
            </remarks>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.DisplayText">
            <summary>
            Gets or sets the display text.
            </summary>
            <value>The display text.</value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.ItemName">
            <summary>
            Gets or sets the item name.
            </summary>
            <value>The item name.</value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.ResourceIndicator">
            <summary>
            Gets or sets the resource indicator.
            </summary>
            <value>
            The resource indicator.
            </value>
        </member>
        <member name="M:Songhay.Models.DisplayItemModel.ToString">
            <summary>
            Represents this instance as a <c>string</c>.
            </summary>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.ItemCategory">
            <summary>
            Gets or sets the item category.
            </summary>
            <value>The item category.</value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.SortOrdinal">
            <summary>
            Gets or sets the sort ordinal.
            </summary>
            <value>The sort ordinal.</value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="T:Songhay.Models.DisplayItemModelCategories">
            <summary>
            Frequently-used categories for <see cref="T:Songhay.Models.DisplayItemModel"/>.
            </summary>
        </member>
        <member name="F:Songhay.Models.DisplayItemModelCategories.GenericWebDocument">
            <summary>
            The GenericWeb Document
            </summary>
        </member>
        <member name="F:Songhay.Models.DisplayItemModelCategories.GenericWebFragment">
            <summary>
            The GenericWeb Fragment
            </summary>
        </member>
        <member name="F:Songhay.Models.DisplayItemModelCategories.GenericWebLog">
            <summary>
            The generic web log
            </summary>
        </member>
        <member name="F:Songhay.Models.DisplayItemModelCategories.GenericWebSchema">
            <summary>
            The generic web schema
            </summary>
        </member>
        <member name="F:Songhay.Models.DisplayItemModelCategories.GenericWebSegment">
            <summary>
            The GenericWeb Segment
            </summary>
        </member>
        <member name="F:Songhay.Models.DisplayItemModelCategories.NewGenericWebPresentation">
            <summary>
            The new generic web presentation
            </summary>
        </member>
        <member name="T:Songhay.Models.EditableObjectCache">
            <summary>
            Defines an undo pattern for MVVM.
            </summary>
        </member>
        <member name="P:Songhay.Models.EditableObjectCache.IsRestoringFromCache">
            <summary>
            Gets or sets a value indicating whether this instance is restoring from cache.
            </summary>
            <value>
            <c>true</c> if this instance is restoring from cache; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Songhay.Models.EditableObjectCache.Restore(System.Action)">
            <summary>
            Restores the specified action.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The expected restoration action is not here.</exception>
        </member>
        <member name="T:Songhay.Models.EncryptionMetadata">
            <summary>
            Defines encryption metadata for persistent storage.
            </summary>
        </member>
        <member name="P:Songhay.Models.EncryptionMetadata.InitialVector">
            <summary>
            Gets or sets the initial vector.
            </summary>
            <value>
            The initial vector.
            </value>
        </member>
        <member name="P:Songhay.Models.EncryptionMetadata.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:Songhay.Models.IActivity">
            <summary>
            Defines an Activity in a shell environment.
            </summary>
            <remarks>
            For more detail, see “Songhay Shell Activities”
            [https://github.com/BryanWilhite/Songhay.HelloWorlds.Activities]
            </remarks>
        </member>
        <member name="M:Songhay.Models.IActivity.DisplayHelp(Songhay.Models.ProgramArgs)">
            <summary>
            Displays the help.
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Models.IActivity.Start(Songhay.Models.ProgramArgs)">
            <summary>
            Starts with the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Songhay.Models.IColorable">
            <summary>
            Defines a colorable visual.
            </summary>
        </member>
        <member name="P:Songhay.Models.IColorable.BackgroundHex">
            <summary>
            Gets or sets the background hexadecimal value.
            </summary>
            <value>The background hexadecimal value.</value>
        </member>
        <member name="P:Songhay.Models.IColorable.ForegroundHex">
            <summary>
            Gets or sets the foreground hexadecimal value.
            </summary>
            <value>The foreground hexadecimal value.</value>
        </member>
        <member name="T:Songhay.Models.IControlInteractionMessage">
            <summary>
            Defines a Composition Message
            for a Control interaction event.
            </summary>
        </member>
        <member name="P:Songhay.Models.IControlInteractionMessage.ControlValue">
            <summary>
            Gets or sets the control value.
            </summary>
            <value>The control value.</value>
        </member>
        <member name="P:Songhay.Models.IControlInteractionMessage.ControlId">
            <summary>
            Gets or sets the control id.
            </summary>
            <value>The control id.</value>
        </member>
        <member name="P:Songhay.Models.IControlInteractionMessage.ControlTag">
            <summary>
            Gets or sets the control tag.
            </summary>
            <value>The control tag.</value>
        </member>
        <member name="T:Songhay.Models.IRepository">
            <summary>
            Defines the repository pattern for an Entity.
            </summary>
            <remarks>
            Based on the NBlog repository by Chris Fulstow
            [https://github.com/ChrisFulstow/NBlog/blob/master/NBlog.Web/Application/Storage/IRepository.cs]
            </remarks>
        </member>
        <member name="M:Songhay.Models.IRepository.DeleteEntity``1(System.Object)">
            <summary>
            Deletes the entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:Songhay.Models.IRepository.HasEntity``1(System.Object)">
            <summary>
            Determines whether the specified key has entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:Songhay.Models.IRepository.LoadAll``1">
            <summary>
            Loads all.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Songhay.Models.IRepository.LoadSingle``1(System.Object)">
            <summary>
            Loads the single.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:Songhay.Models.IRepository.SaveEntity``1(``0)">
            <summary>
            Saves the entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="item">The item.</param>
        </member>
        <member name="T:Songhay.Models.ISelectable">
            <summary>
            Defines a selectable visual.
            </summary>
        </member>
        <member name="P:Songhay.Models.ISelectable.IsDefaultSelection">
            <summary>
            Gets or sets whether this is default selection.
            </summary>
            <value>
            This is default selection.
            </value>
        </member>
        <member name="P:Songhay.Models.ISelectable.IsEnabled">
            <summary>
            Gets or sets whether this is enabled.
            </summary>
            <value>
            This is enabled.
            </value>
        </member>
        <member name="P:Songhay.Models.ISelectable.IsSelected">
            <summary>
            Gets or sets whether this is selected.
            </summary>
            <value>
            <c>true</c> when this is selected.
            </value>
        </member>
        <member name="T:Songhay.Models.ISortable">
            <summary>
            Defines a sortable visual.
            </summary>
        </member>
        <member name="P:Songhay.Models.ISortable.ItemCategory">
            <summary>
            Gets or sets the item category.
            </summary>
            <value>The item category.</value>
        </member>
        <member name="P:Songhay.Models.ISortable.SortOrdinal">
            <summary>
            Gets or sets the sort ordinal.
            </summary>
            <value>The sort ordinal.</value>
        </member>
        <member name="P:Songhay.Models.ISortable.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="T:Songhay.Models.ISyndicatable">
            <summary>
            Specifies that a Model supports syndication.
            </summary>
        </member>
        <member name="M:Songhay.Models.ISyndicatable.GetSyndicationFeed">
            <summary>
            Gets the syndication feed.
            </summary>
        </member>
        <member name="M:Songhay.Models.ISyndicatable.GetSyndicationItem">
            <summary>
            Gets the syndication item.
            </summary>
        </member>
        <member name="T:Songhay.Models.LazyDisplayItem`1">
            <summary>
            Wraps a lazy-initialized object
            with meta-data for display.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Songhay.Models.LazyDisplayItem`1.DisplayName">
            <summary>
            Gets or sets the targetValues name.
            </summary>
            <value>The targetValues name.</value>
        </member>
        <member name="P:Songhay.Models.LazyDisplayItem`1.LazyItem">
            <summary>
            Gets or sets the lazy item.
            </summary>
            <value>The lazy item.</value>
        </member>
        <member name="P:Songhay.Models.LazyDisplayItem`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Songhay.Models.MenuDisplayItemModel">
            <summary>
            Defines a colorable, selectable menu item
            </summary>
        </member>
        <member name="M:Songhay.Models.MenuDisplayItemModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.MenuDisplayItemModel"/> class.
            </summary>
        </member>
        <member name="P:Songhay.Models.MenuDisplayItemModel.ChildItems">
            <summary>
            Gets or sets the child items.
            </summary>
            <value>
            The child items.
            </value>
        </member>
        <member name="P:Songhay.Models.MenuDisplayItemModel.IsDefaultSelection">
            <summary>
            Gets or sets whether this is default selection.
            </summary>
            <value>
            This is default selection.
            </value>
        </member>
        <member name="P:Songhay.Models.MenuDisplayItemModel.IsEnabled">
            <summary>
            Gets or sets whether this is enabled.
            </summary>
            <value>
            This is enabled.
            </value>
        </member>
        <member name="P:Songhay.Models.MenuDisplayItemModel.IsSelected">
            <summary>
            Gets or sets whether this is selected.
            </summary>
            <value>
            <c>true</c> when this is selected.
            </value>
        </member>
        <member name="T:Songhay.Models.OpenAuthorizationData">
            <summary>
            Defines Authorization Information for OAuth 1.0.
            </summary>
        </member>
        <member name="M:Songhay.Models.OpenAuthorizationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpenAuthorizationData"/> class.
            </summary>
        </member>
        <member name="M:Songhay.Models.OpenAuthorizationData.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpenAuthorizationData"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Models.OpenAuthorizationData.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpenAuthorizationData" /> class.
            </summary>
            <param name="nonce">The nonce.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Models.OpenAuthorizationData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpenAuthorizationData" /> class.
            </summary>
            <param name="nonce">The nonce.</param>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.ConsumerKey">
            <summary>
            Gets or sets the consumer key.
            </summary>
            <value>
            The consumer key.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.ConsumerSecret">
            <summary>
            Gets or sets the consumer secret.
            </summary>
            <value>
            The consumer secret.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.Nonce">
            <summary>
            Gets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.TimeStamp">
            <summary>
            Gets or sets the time stamp.
            </summary>
            <value>
            The time stamp.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.TokenSecret">
            <summary>
            Gets or sets the token secret.
            </summary>
            <value>
            The token secret.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.SignatureMethod">
            <summary>
            Gets the signature method.
            </summary>
            <value>
            The signature method.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="T:Songhay.Models.OpmlBody">
            <summary>
            Defines a managed representation of the OPML body element.
            </summary>
        </member>
        <member name="P:Songhay.Models.OpmlBody.Outlines">
            <summary>
            Gets or sets the outlines.
            </summary>
            <value>The outlines.</value>
        </member>
        <member name="T:Songhay.Models.OpmlDocument">
            <summary>
            Dave Winer, his Outline Processor Markup Language document format
            </summary>
            <remarks>
            “OPML an XML-based format that allows exchange of outline-structured information
            between applications running on different operating systems and environments.”
            http://www.opml.org/about
            </remarks>
        </member>
        <member name="F:Songhay.Models.OpmlDocument.rxOpmlSchema">
            <summary>
            The rx opml schema URI
            </summary>
        </member>
        <member name="M:Songhay.Models.OpmlDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpmlDocument"/> class.
            </summary>
        </member>
        <member name="P:Songhay.Models.OpmlDocument.XsiSchemaLocation">
            <summary>
            Gets or sets the schema location.
            </summary>
            <value>The schema location.</value>
        </member>
        <member name="P:Songhay.Models.OpmlDocument.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Songhay.Models.OpmlDocument.OpmlHead">
            <summary>
            Gets the OPML head element.
            </summary>
            <value>The OPML head element.</value>
        </member>
        <member name="P:Songhay.Models.OpmlDocument.OpmlBody">
            <summary>
            Gets the OPML body element.
            </summary>
            <value>The OPML body element.</value>
        </member>
        <member name="T:Songhay.Models.OpmlHead">
            <summary>
            Defines a managed representation of the OPML head element.
            </summary>
        </member>
        <member name="M:Songhay.Models.OpmlHead.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpmlHead"/> class.
            </summary>
        </member>
        <member name="P:Songhay.Models.OpmlHead.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.DateCreatedString">
            <summary>
            Gets the date created string.
            </summary>
            <value>The date created string.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.DateModified">
            <summary>
            Gets or sets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.DateModifiedString">
            <summary>
            Gets the date created string.
            </summary>
            <value>The date created string.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.OwnerName">
            <summary>
            Gets or sets the name of the owner.
            </summary>
            <value>The name of the owner.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.OwnerEmail">
            <summary>
            Gets or sets the owner email.
            </summary>
            <value>The owner email.</value>
        </member>
        <member name="T:Songhay.Models.OpmlOutline">
            <summary>
            Defines a managed representation of the OPML outline element.
            </summary>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Category">
            <summary>
            Gets or sets the Category.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Id">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Outlines">
            <summary>
            Gets or sets the outlines.
            </summary>
            <value>The outlines.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.OutlineType">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.XmlUrl">
            <summary>
            Gets or sets the XML URL.
            </summary>
            <value>The XML URL.</value>
        </member>
        <member name="T:Songhay.Models.PagedResult">
            <summary>
            Defines a paged set of data.
            </summary>
        </member>
        <member name="P:Songhay.Models.PagedResult.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:Songhay.Models.PagedResult.PagedResultSet">
            <summary>
            Gets or sets the paged result set.
            </summary>
            <value>The paged result set.</value>
        </member>
        <member name="T:Songhay.Models.PagedResultMeta">
            <summary>
            Defines the metadata for a paged set of data.
            </summary>
        </member>
        <member name="P:Songhay.Models.PagedResultMeta.PageIndex">
            <summary>
            Gets or sets the index of the page.
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:Songhay.Models.PagedResultMeta.PageCount">
            <summary>
            Gets the page count.
            </summary>
            <value>The page count.</value>
        </member>
        <member name="P:Songhay.Models.PagedResultMeta.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Songhay.Models.PagedResultMeta.TotalCount">
            <summary>
            Gets or sets the total count.
            </summary>
            <value>The total count.</value>
        </member>
        <member name="T:Songhay.Models.ProgramArgs">
            <summary>
            Defines conventional command-line arguments.
            </summary>
        </member>
        <member name="M:Songhay.Models.ProgramArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.ProgramArgs"/> class.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="F:Songhay.Models.ProgramArgs.BasePath">
            <summary>
            The base-path argument.
            </summary>
        </member>
        <member name="F:Songhay.Models.ProgramArgs.BasePathRequired">
            <summary>
            The base path required argument.
            </summary>
        </member>
        <member name="F:Songhay.Models.ProgramArgs.Help">
            <summary>
            The help argument.
            </summary>
        </member>
        <member name="F:Songhay.Models.ProgramArgs.SettingsFile">
            <summary>
            The settings file argument.
            </summary>
        </member>
        <member name="P:Songhay.Models.ProgramArgs.Args">
            <summary>
            Gets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramArgs.HelpSet">
            <summary>
            Gets the help set.
            </summary>
            <value>
            The help set.
            </value>
        </member>
        <member name="T:Songhay.Models.XEncoding">
            <summary>
            Defines selected text file encodings.
            </summary>
        </member>
        <member name="F:Songhay.Models.XEncoding.Windows1252">
            <summary>
            Text encoding
            </summary>
        </member>
        <member name="F:Songhay.Models.XEncoding.Iso88591">
            <summary>
            Text encoding
            </summary>
        </member>
        <member name="F:Songhay.Models.XEncoding.Utf08">
            <summary>
            Text encoding
            </summary>
        </member>
        <member name="F:Songhay.Models.XEncoding.Utf16">
            <summary>
            Text encoding
            </summary>
        </member>
        <member name="T:Songhay.Models.XObjectMetadata">
            <summary>
            <see cref="T:System.Xml.Linq.XObject"/> metadata
            </summary>
        </member>
        <member name="F:Songhay.Models.XObjectMetadata.SiteMapNamespace">
            <summary>
            The sitemaps.org namespace
            </summary>
        </member>
        <member name="P:Songhay.Models.XObjectMetadata.XhtmlDocTypeTransitional">
            <summary>
            DOCTYPE XHTML Transitional
            </summary>
        </member>
        <member name="T:Songhay.Security.SaltedHash">
            <summary>
            A Salted Hash implementation
            </summary>
            <remarks>
            For more information, see “Creating salted hash passwords in C#”
            by Martijn Dijksterhuis [http://www.dijksterhuis.org/creating-salted-hash-values-in-c/]
            </remarks>
        </member>
        <member name="M:Songhay.Security.SaltedHash.#ctor(System.Security.Cryptography.HashAlgorithm,System.Int32)">
            <summary>
            The constructor takes a HashAlgorithm as a parameter.
            </summary>
            <param name="hashAlgorithm">A <see cref="T:System.Security.Cryptography.HashAlgorithm" /> HashAlgorihm which is derived from HashAlgorithm. C# provides
            the following classes: SHA1Managed,SHA256Managed, SHA384Managed, SHA512Managed and MD5CryptoServiceProvider</param>
            <param name="theSaltLength">Length of the salt.</param>
        </member>
        <member name="M:Songhay.Security.SaltedHash.#ctor">
            <summary>
            Default constructor which initializes the SaltedHash with the SHA256Managed algorithm
            and a Salt of 4 bytes ( or 4*8 = 32 bits)
            </summary>
        </member>
        <member name="M:Songhay.Security.SaltedHash.GetHashAndSalt(System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Given a data block this routine returns both a Hash and a Salt
            </summary>
            <param name="data">
            A <see cref="T:System.Byte"/>byte array containing the data from which to derive the salt
            </param>
            <param name="hash">
            A <see cref="T:System.Byte"/>byte array which will contain the hash calculated
            </param>
            <param name="salt">
            A <see cref="T:System.Byte"/>byte array which will contain the salt generated
            </param>
        </member>
        <member name="M:Songhay.Security.SaltedHash.GetHashAndSalt(System.String,System.String@,System.String@)">
            <summary>
            The routine provides a wrapper around the GetHashAndSalt function providing conversion
            from the required byte arrays to strings. Both the Hash and Salt are returned as Base-64 encoded strings.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> string containing the data to hash
            </param>
            <param name="hash">
            A <see cref="T:System.String"/> base64 encoded string containing the generated hash
            </param>
            <param name="salt">
            A <see cref="T:System.String"/> base64 encoded string containing the generated salt
            </param>
        </member>
        <member name="M:Songhay.Security.SaltedHash.VerifyHash(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            This routine verifies whether the data generates the same hash as we had stored previously
            </summary>
            <param name="data">The data to verify </param>
            <param name="hash">The hash we had stored previously</param>
            <param name="salt">The salt we had stored previously</param>
            <returns>True on a successful match</returns>
        </member>
        <member name="M:Songhay.Security.SaltedHash.VerifyHash(System.String,System.String,System.String)">
            <summary>
            This routine provides a wrapper around VerifyHash converting the strings containing the
            data, hash and salt into byte arrays before calling VerifyHash.
            </summary>
            <param name="data">A UTF-8 encoded string containing the data to verify</param>
            <param name="hash">A base-64 encoded string containing the previously stored hash</param>
            <param name="salt">A base-64 encoded string containing the previously stored salt</param>
        </member>
        <member name="T:Songhay.Security.SymmetricCrypt">
            <summary>
            Implements symmetric encryption/decryption
            for <see cref="T:System.Security.Cryptography.AesCryptoServiceProvider"/>.
            </summary>
            <remarks>
            For more information, see “AesCryptoServiceProvider Class”
            [http://msdn.microsoft.com/en-us/library/system.security.cryptography.aescryptoserviceprovider.aspx]
            </remarks>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.GetKey">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.GetInitialVector">
            <summary>
            Gets the initial vector.
            </summary>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.Decrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts the specified text.
            </summary>
            <param name="input">The text.</param>
            <param name="key">The key.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypts the specified text.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.Encrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            Encrypts the specified text.
            </summary>
            <param name="input">The text.</param>
            <param name="key">The key.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="T:Songhay.Text.CsvExporter`1">
            <summary>
            Transforms and exports the specified class to CSV format.
            </summary>
            <typeparam name="T">the class to export</typeparam>
            <remarks>
            Based on http://stackoverflow.com/questions/2422212/simple-c-sharp-csv-excel-export-class
            </remarks>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Text.CsvExporter`1"/> class.
            </summary>
            <param name="rows">The rows.</param>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Text.CsvExporter`1"/> class.
            </summary>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="P:Songhay.Text.CsvExporter`1.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>
            The columns.
            </value>
        </member>
        <member name="P:Songhay.Text.CsvExporter`1.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>
            The rows.
            </value>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.Export">
            <summary>
            Exports this instance.
            </summary>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.Export(System.Boolean)">
            <summary>
            Exports the specified include header line.
            </summary>
            <param name="includeHeaderLine">if set to <c>true</c> [include header line].</param>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.ExportToFile(System.String)">
            <summary>
            Exports to file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.ExportToBytes">
            <summary>
            Exports to bytes.
            </summary>
        </member>
        <member name="T:Songhay.Xml.OpmlUtility">
            <summary>
            Static helpers for OPML.
            </summary>
        </member>
        <member name="P:Songhay.Xml.OpmlUtility.rx">
            <summary>
            Conventional namespace for OPML documents.
            </summary>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetBody(System.Xml.Linq.XContainer,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the body.
            </summary>
            <param name="root">The root.</param>
            <param name="ns">The namespace.</param>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetDocument(System.String)">
            <summary>
            Gets the document.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetDocument(System.String,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the document.
            </summary>
            <param name="xml">The XML.</param>
            <param name="ns">The ns.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetDocument(System.Xml.Linq.XContainer,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the document.
            </summary>
            <param name="root">The root.</param>
            <param name="ns">The conventional namespace.</param>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetHead(System.Xml.Linq.XContainer,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the head.
            </summary>
            <param name="root">The root.</param>
            <param name="ns">The namespace.</param>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetOutline(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the outline.
            </summary>
            <param name="root">The root.</param>
            <param name="ns">The namespace.</param>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetOutlines(System.Xml.Linq.XContainer,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the outlines.
            </summary>
            <param name="root">The root.</param>
            <param name="ns">The namespace.</param>
        </member>
        <member name="T:Songhay.Xml.XhtmlDocumentUtility">
            <summary>
            Static members for XHTML Documents.
            </summary>
            <summary>
            Static members for XHTML Documents.
            </summary>
        </member>
        <member name="P:Songhay.Xml.XhtmlDocumentUtility.xhtml">
            <summary>
            XHTML Namespace
            </summary>
        </member>
        <member name="M:Songhay.Xml.XhtmlDocumentUtility.GetDocument(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Loads the document.
            </summary>
            <param name="document">The XML document.</param>
            <param name="webPath">The public web path.</param>
        </member>
        <member name="M:Songhay.Xml.XhtmlDocumentUtility.GetDocument(System.Xml.Linq.XDocument,System.String,System.Boolean)">
            <summary>
            Loads the document.
            </summary>
            <param name="document">The XML document.</param>
            <param name="webPath">The public web path.</param>
            <param name="useXhtmlNamespace">if set to <c>true</c> use XHTML namespace (<c>true</c> by default).</param>
        </member>
        <member name="M:Songhay.Xml.XhtmlDocumentUtility.LoadDocument(System.String,System.String)">
            <summary>
            Loads the document.
            </summary>
            <param name="pathToDocument">The path to document.</param>
            <param name="webPath">The public web path.</param>
        </member>
        <member name="M:Songhay.Xml.XhtmlDocumentUtility.WriteDocumentIndex(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Writes the index of XHTML documents.
            </summary>
            <param name="indexFileName">Name of the index file.</param>
            <param name="indexTitle">The index title.</param>
            <param name="publicRoot">The public root.</param>
            <param name="pathToDirectory">The path to the specified directory.</param>
            <param name="pathToOutput">The path to output.</param>
        </member>
        <member name="T:Songhay.Xml.XObjectUtility">
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
            <summary>
            Static helper members for XML-related routines.
            </summary>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetLocalNameXPathQuery(System.String)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode" /> into a <c>local-name()</c>, XPath-predicate query.
            </summary>
            <param name="childElementName">Name of the child element.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetLocalNameXPathQuery(System.String,System.String)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode" /> into a <c>local-name()</c>, XPath-predicate query.
            </summary>
            <param name="namespacePrefixOrUri">The namespace prefix or URI.</param>
            <param name="childElementName">Name of the child element.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetLocalNameXPathQuery(System.String,System.String,System.String)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode" /> into a <c>local-name()</c>, XPath-predicate query.
            </summary>
            <param name="namespacePrefixOrUri">The namespace prefix or URI.</param>
            <param name="childElementName">Name of the child element.</param>
            <param name="childAttributeName">Name of the child attribute.</param>
            <returns></returns>
            <remarks>
            This routine is useful when namespace-resolving is not desirable or available.
            </remarks>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetValue(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets the element or attribute value of the specified element.
            </summary>
            <param name="currentNode">The current element.</param>
            <param name="query">The xpath query.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetValue(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Gets the element or attribute value of the specified element.
            </summary>
            <param name="currentNode">The current </param>
            <param name="query">The xpath query.</param>
            <param name="throwException">if set to <c>true</c> throw exception.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXAttributeValue(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXAttributeValue(System.Xml.Linq.XNode,System.String,System.Boolean,System.String)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="defaultValue">Return the specified default value for “zero-length” text nodes</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXAttributeValue(System.Xml.Linq.XNode,System.String,System.Boolean,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="defaultValue">Return the specified default value for “zero-length” text nodes</param>
            <param name="resolver">
            The <see cref="T:System.Xml.IXmlNamespaceResolver"/>
            to use to resolve prefixes.
            </param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXAttributeValueAndParse``1(System.Xml.Linq.XNode,System.String,System.Boolean,``0)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="setQuery">The XPath <see cref="T:System.String"/>.</param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes and nodes that do not parse into the specified type.</param>
            <param name="defaultValue">Return a boxing <see cref="T:System.Object"/> for “zero-length” text nodes.</param>
            <typeparam name="T">The type to parse from the node value.</typeparam>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXAttributeValueAndParse``1(System.Xml.Linq.XNode,System.String,System.Boolean,``0,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <typeparam name="T">The type to parse from the node value.</typeparam>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/> set.</param>
            <param name="setQuery">The XPath <see cref="T:System.String"/>.</param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes and nodes that do not parse into the specified type.</param>
            <param name="defaultValue">Return a boxing <see cref="T:System.Object"/> for “zero-length” text nodes.</param>
            <param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver"/>
            to use to resolve prefixes.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXDeclaration">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XDeclaration"/>.
            </summary>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXDeclaration(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XDeclaration"/>.
            </summary>
            <param name="encoding">The encoding (<see cref="F:Songhay.Models.XEncoding.Utf08"/> by default).</param>
            <param name="isStandAlone">When <c>true</c> document is stand-alone (<c>true</c> by default).</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXElement(System.String,System.Object)">
            <summary>
            Gets the element.
            </summary>
            <param name="rootElement">The root element.</param>
            <param name="innerXml">The inner XML.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXElement(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets the element.
            </summary>
            <param name="root">The root.</param>
            <param name="pathToElement">The XPath to element.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXElements(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets the elements.
            </summary>
            <param name="currentElement">The current element.</param>
            <param name="query">The xpath query.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNode(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNode(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNode(System.Xml.Linq.XNode,System.String,System.Boolean,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <param name="resolver">The resolver.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNodes(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNodes(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNodes(System.Xml.Linq.XNode,System.String,System.Boolean,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <param name="resolver">The resolver.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObject(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XObject"/> from the specified XPath query..
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/> set.</param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObject(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XObject"/> from the specified XPath query..
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/> set.</param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObject(System.Xml.Linq.XNode,System.String,System.Boolean,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Gets the XObject.
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/> set.</param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="resolver">
            The <see cref="T:System.Xml.IXmlNamespaceResolver"/>
            to use to resolve prefixes.
            </param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObjects(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObjects(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObjects(System.Xml.Linq.XNode,System.String,System.Boolean,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <param name="resolver">The resolver.</param>
            <returns></returns>
            <exception cref="T:System.Xml.XmlException"></exception>
        </member>
        <member name="F:Songhay.Xml.XObjectUtility.GlyphNonBreakingSpace">
            <summary>
            Glyph: Non-Breaking Space
            </summary>
        </member>
        <member name="P:Songhay.Xml.XObjectUtility.XTextNonBreakingSpace">
            <summary>
            <see cref="T:System.Xml.Linq.XText"/>: Non-Breaking Space
            </summary>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.JoinFlattenedXTextNodes(System.Xml.Linq.XElement)">
            <summary>
            Joins the flattened <see cref="T:System.Xml.Linq.XText"/> nodes.
            </summary>
            <param name="rootElement">The root element.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.JoinFlattenedXTextNodes(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Joins the flattened <see cref="T:System.Xml.Linq.XText"/> nodes.
            </summary>
            <param name="rootElement">The root element.</param>
            <param name="includeRootElement">if set to <c>true</c> [include root element].</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.JoinFlattenedXTextNodes(System.Xml.Linq.XElement,System.Boolean,System.String)">
            <summary>
            Joins the flattened <see cref="T:System.Xml.Linq.XText"/> nodes.
            </summary>
            <param name="rootElement">The root element.</param>
            <param name="includeRootElement">if set to <c>true</c> [include root element].</param>
            <param name="joinDelimiter">The join delimiter.</param>
            <returns></returns>
        </member>
    </members>
</doc>
